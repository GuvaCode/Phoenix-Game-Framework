unit Map;

interface

uses
  phxTypes;

const
  TileWidth  = 64;
  TileHeight = 32;

  MapWidth  = 16;
  MapHeight = 16;

  MapOffsetX = 400;
  MapOffsetY = 100;

  LayerBackground = 0;
  LayerForeground = 1;
  LayerPassable   = 2;

type


TTile = record
  Layer1: Integer;
  Layer2: Integer;
  Passable: Byte;
end;

var

MapData: array[0..2, 0..MapWidth - 1, 0..MapHeight -1] of Integer =
(
  // LayerBackground
  (
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    (1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    (1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    (1, 1, 1, 1, 1, 23, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0),
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    (1, 1, 22, 1, 1, 1, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1),
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    (1, 1, 1, 1, 1, 1, 1, 249, 242, 242, 242, 322, 242, 242, 242, 242),
    (1, 1, 1, 1, 1, 1, 1, 241, 000, 000, 000, 326, 000, 000, 000, 000),
    (1, 1, 1, 1, 1, 1, 1, 241, 000, 305, 305, 326, 000, 305, 305, 305),
    (1, 1, 1, 1, 1, 1, 1, 241, 000, 305, 306, 326, 000, 305, 305, 305),
    (1, 1, 1, 1, 1, 1, 1, 241, 000, 305, 306, 306, 000, 305, 305, 305),
    (0, 0, 0, 0, 0, 0, 0, 000, 000, 305, 305, 305, 305, 305, 305, 305)
  ),
  // LayerForeground
  (
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 579, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
  ),
  // LayerPassable
  (
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1),
    (0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0),
    (1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0)
  )
);


function WorldToScreen(const X, Y : Single): TVector2f; overload;
function WorldToScreen(const Value: TVector2f): TVector2f; overload;

function ScreenToWorld(const X, Y : Single): TVector2f; overload;
function ScreenToWorld(const Value: TVector2f): TVector2f; overload;

implementation

//------------------------------------------------------------------------------
function WorldToScreen(const Value: TVector2f): TVector2f;
begin
  Result.X:= MapOffsetX + (Value.X - Value.Y) * (TileWidth  div 2);
  Result.Y:= MapOffsetY + (Value.X + Value.Y) * (TileHeight div 2);
end;

//------------------------------------------------------------------------------
function WorldToScreen(const X, Y : Single): TVector2f;
begin
  Result:= WorldToScreen(Vector2f(X,Y));
end;

//------------------------------------------------------------------------------
function ScreenToWorld(const Value: TVector2f): TVector2f;
var X,Y: Single;
begin
  X:= (Value.X - MapOffsetX) / (TileWidth  div 2);
  Y:= (Value.Y - MapOffsetY) / (TileHeight div 2);

  Result.X:= (X + Y) / 2;
  Result.Y:= (Y - X) / 2;
end;

//------------------------------------------------------------------------------
function ScreenToWorld(const X, Y : Single): TVector2f; overload;
begin
  Result:= ScreenToWorld(Vector2f(X,Y));
end;



end.
